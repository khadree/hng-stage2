# This template is expanded by the entrypoint script.


events {
worker_connections 1024;
}


http {
# Tight timeouts for quick fail detection
upstream backend {
server ${BLUE_HOST}:${APP_PORT} max_fails=1 fail_timeout=5s ${BACKUP_MARKER_BLUE};
server ${GREEN_HOST}:${APP_PORT} max_fails=1 fail_timeout=5s ${BACKUP_MARKER_GREEN};
}


server {
listen 80;


location / {
# Forward client request headers
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;


# Upstream / failover behavior
proxy_connect_timeout 1s;
proxy_send_timeout 1s;
proxy_read_timeout 2s;


# If primary errors/timeouts/5xx then try the next upstream within the same client request
proxy_next_upstream error timeout http_500 http_502 http_503 http_504 http_429;
proxy_next_upstream_tries 2;


# Ensure response headers from the app are forwarded unchanged
proxy_pass_header X-App-Pool;
proxy_pass_header X-Release-Id;


proxy_pass http://backend;


# Disable buffering for fast fail and immediate responses
proxy_buffering off;
}


# Expose /version proxied as well (same as /)
location = /version {
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;


proxy_connect_timeout 1s;
proxy_send_timeout 1s;
proxy_read_timeout 2s;


proxy_next_upstream error timeout http_500 http_502 http_503 http_504 http_429;
proxy_next_upstream_tries 2;


proxy_pass_header X-App-Pool;
proxy_pass_header X-Release-Id;


proxy_pass http://backend/version;
proxy_buffering off;
}
}
}